##Figure 2
library(permute)
library(vegan)
setwd('D:/')
OTU_Tax16sCP <-read.csv("OTU_rare_TS.csv", header=TRUE,check.names = F)
#Domain=aggregate(x=OTU_Tax16sCP[,2:101]/51565,by=list(OTU_Tax16sCP$Domain),FUN='sum')
#write.csv(Domain, file = " Domain_16S.csv")
datacol = ncol(OTU_Tax16sCP)-7
colSums(OTU_Tax16sCP[2:datacol])
rare = sum(OTU_Tax16sCP[,2])
Kingdom=aggregate(x=OTU_Tax16sCP[,2:datacol]/rare,by=list(OTU_Tax16sCP$Kingdom),FUN='sum')
Phylum=aggregate(x=OTU_Tax16sCP[,2:datacol]/rare,by=list(OTU_Tax16sCP$Phylum),FUN='sum')
colSums(Phylum[,2:datacol])
all <-  Kingdom
precount <- nrow(all)
for (i in 1:nrow(Phylum)) {
  all[precount+i,] <- Phylum[i,]}
Class=aggregate(x=OTU_Tax16sCP[,2:datacol]/rare,by=list(OTU_Tax16sCP$Class),FUN='sum')
precount <- nrow(all)
for (i in 1:nrow(Class)) {
  all[precount+i,] <- Class[i,]}
Order=aggregate(x=OTU_Tax16sCP[,2:datacol]/rare,by=list(OTU_Tax16sCP$Order),FUN='sum')
precount <- nrow(all)
for (i in 1:nrow(Order)) {
  all[precount+i,] <- Order[i,]}
Family=aggregate(x=OTU_Tax16sCP[,2:datacol]/rare,by=list(OTU_Tax16sCP$Family),FUN='sum')
precount <- nrow(all)
for (i in 1:nrow(Family)) {
  all[precount+i,] <- Family[i,]}
Genus=aggregate(x=OTU_Tax16sCP[,2:datacol]/rare,by=list(OTU_Tax16sCP$Genus),FUN='sum')
precount <- nrow(all)
for (i in 1:nrow(Genus)) {
  all[precount+i,] <- Genus[i,]}
write.csv(all, file = "TS.csv",row.names = FALSE)
colSums(Phylum[,2:datacol])
colSums(Class[,2:datacol])
colSums(Order[,2:datacol])
colSums(Family[,2:datacol])
colSums(Genus[,2:datacol])
all$average = rowMeans(all[,2:datacol])
screen0.0001 <-all
result <- subset(screen0.0001[which(screen0.0001$average>0.0005),])
write.csv(result[,1:ncol(result)-1], file = "TS.csv",row.names = FALSE)
library(reshape2)
data <-read.csv("TS.csv", header=TRUE,row.names = 1)
group <- read.csv(file = "group_TS.csv",header = F)
data <- data[, match(group[, 1], colnames(data))]
write.csv(data, file = "TS.csv",row.names = TRUE)
lengthData = ncol(data)
pvalue = apply(data,1,function(x) wilcox.test(x[1:(lengthData/2)],x[(lengthData/2+1):lengthData],paired = T,alternative="two.sided",conf.level=0.95)$p.value)
#tvalue=apply(data,1,function(x)  wilcox.test(x[2:31],x[32:61],paired = T,alternative="two.sided",conf.level=0.95)$statistic)
write.csv(pvalue, 'pvalue_TS.csv')
data1 = data
data1$suma = rowSums(data1[, 1:(lengthData/2)])
data1$sumb = rowSums(data1[, (lengthData/2+1):lengthData])
data1$p = pvalue
data2 = data1[which(data1$p!='NaN'& data1$p < 0.1),]
summary(data2$p)
data3 = subset(data2,select = c(suma,sumb,p))
data3$sum = data3$suma+data3$sumb
data3$sub = data3$suma-data3$sumb
data3$clade_marker_size = "clade_marker_size"
data3$clade_value = 6*log(data3$sum*10000)
data3$clade_marker_color = "clade_marker_color"
data3$color_value = ifelse(data3$sub > 0, '#FCB4AE', '#B3E2CD')
name <- rownames(data3)
data3$finalName = sapply(strsplit(name, "\\."), function(x) tail(x, n = 1)) 
data3$annotation_background_color = "annotation_background_color"
data3$bkcolor = data3$color_value
write.csv(data3,"TS.csv",row.names = T)

python graphlan_annotate.py --annot annot_0.txt guide_16s.txt guide_1.xml
python graphlan.py guide_1.xml step_1_2.pdf --dpi 300 --size 3.5
 
python graphlan_annotate.py --annot annot_1.txt guide_1.xml guide_2.xml
python graphlan.py guide_2.xml step_2_5.pdf --dpi 300 --size 3.5
 
python graphlan_annotate.py --annot annot_2.txt guide_2.xml guide_3.xml
python graphlan.py guide_3.xml step_3_2.pdf --dpi 300 --size 3.5
